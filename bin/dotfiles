#!/bin/bash
DOTFILES="$HOME/.dotfiles"
NAME="Eduardo Ruiz"
EMAIL="eduarbo@gmail.com"

source ./lib/brew
source ./lib/npm

# Header logging
e_header() {
    echo -e "\n$(tput setaf 7)$@$(tput sgr0)";
}

# Success logging
e_success() {
    echo -e "$(tput setaf 64)âœ“ $@$(tput sgr0)";
}

# Error logging
e_error() {
    echo -e "$(tput setaf 1)x $@$(tput sgr0)";
}

# Warning logging
e_warning() {
    echo -e "$(tput setaf 136)! $@$(tput sgr0)";
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ `type -P $1` ]; then
      return 0
    fi
    return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
    if ! `brew list $1 >/dev/null`; then
        e_warning "Missing formula: $1"
        return 1
    fi

    echo $1 "already installed."
    return 0
}

# Clone the dotfiles if the directory is missing
if [[ ! -d ${DOTFILES} ]] ; then
    e_header "Downloading dotfiles..."
    # Clone the GitHub repo
    git clone --recursive https://github.com/eduarbo/dotfiles.git ${DOTFILES}
# Otherwise conditionally update repo and/or package installations
else
    e_header "Updating dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
    # Return to previous working directory

    # Install and update packages
    echo "Updating packages..."
    # Install Homebrew formulae
    run_brew
    # Install Node packages
    run_npm
fi

cd $DOTFILES

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    echo "  https://developer.apple.com/downloads"
    exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
fi

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${DOTFILES}/git/gitconfig  ${HOME}/.gitconfig

    # Force remove the vim directory if it's already there.
    if [ -e "${HOME}/.vim" ] ; then
        rm -rf "${HOME}/.vim"
    fi

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "bash/bashrc"        ".bashrc"
    link "bash/bash_profile"  ".bash_profile"
    link "git/gitattributes"  ".gitattributes"
    link "git/gitignore"      ".gitignore"
    link "vim"                ".vim"
    link "vim/vimrc"          ".vimrc"
    link "jshintrc"           ".jshintrc"
    link "tmux.conf"          ".tmux.conf"
    link "itermcolors"        "itermcolors"

    #Copy fonts to Fonts directory
    rsync -avz --quiet ${DOTFILES}/fonts/*  ${HOME}/Library/Fonts

    e_success "Dotfiles update complete!"
}

# Verify that the user wants to proceed before potentially overwriting files
echo
e_warning "Warning: This may overwrite your existing dotfiles."
read -p "Continue? (y/n) " -n 1
echo

if [[ $REPLY =~ ^[Yy]$ ]] ; then
    mirrorfiles
    source ${HOME}/.bash_profile
else
    echo "Aborting..."
    exit 1
fi

read -p "Are you Eduardo Ruiz (y/n) " -n 1

echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    git config --global user.email "$EMAIL"
    git config --global user.name "$NAME"

    e_success "Process finished. Enjoy!"
fi
