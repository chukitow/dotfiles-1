" Fork by Tonatiuh Nunez <tonatiuhnb@gmail.com> (https://github.com/tonatiuh/dotfiles-1/tree/master/vim)
" This is my fork of the original repo from Eduardo Ruiz <eduarbo@gmail.com> (https://github.com/eduarbo/dotfiles/tree/master/vim)
"
" Basic
filetype off
call pathogen#infect()
filetype plugin indent on
set nocompatible

" Golden view
let g:goldenview__enable_default_mapping = 0
nmap <silent> <MY_KEY> <Plug>GoldenViewSplit

" do not save swap files
set noswapfile

" Plugins
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'jiangmiao/auto-pairs.git'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'gmarik/vundle'
Bundle 'tpope/vim-endwise'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'vim-scripts/tComment'
Bundle 'tsaleh/vim-matchit'
Bundle 'sjl/gundo.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'altercation/vim-colors-solarized'
Bundle 'danro/rename.vim'
Bundle 'grassdog/RemoveFile.vim'
Bundle 'tpope/vim-surround'
Bundle 'plasticboy/vim-markdown'
Bundle 'vim-scripts/GoldenView.Vim'
Bundle 'mileszs/ack.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'kshenoy/vim-signature'
Bundle 'godlygeek/tabular'

" Line for marking 100 characters width, so that code under that limit can
" fullfill that requirement
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80.\+', -1)
endif

" color theme
Bundle '29decibel/codeschool-vim-theme'

if has("gui_macvim") && has("gui_running")
  set guifont=DejaVu\ Sans\ Mono:h14
  set t_Co=256
  colorscheme jellybeans
else
  colorscheme ir_dark
end


set background=light
set cursorline

" Map semicolon to colon
map ; :

" Move tabs position (use ctrl+shif+ left_arrow | right_arrow)
map <D-S-Left> :tabm-1 <Enter>
map <D-S-Right> :tabm+1 <Enter>

" Start of the line
map 0 ^

" jj instead of the scape key
:imap jj <Esc>
:imap jk <Esc> :w <Enter>

" Tabs like chrome
map <D-t> :tabnew<CR>

" Insert New Line
nnoremap <S-Enter> O<ESC> " awesome, inserts new line without going into

" insert mode
nnoremap <Enter> o<ESC>

" NERDTree config
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\env','\.vim$', '\~$', '\.pyc$', '\.swp$', '\.egg-info$', '^dist$', '^build$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']
let NERDTreeShowBookmarks=0
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDChristmasTree = 1
let NERDTreeChDirMode = 2
let g:NERDTreeHijackNetrw=0

map <C-n> :NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_open_on_gui_startup = 0

augroup ps_nerdtree
  au!

  au Filetype nerdtree setlocal nolist
  au Filetype nerdtree nnoremap <buffer> K :q<cr>
augroup END

" Ignore files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux

" Wrap
set wrap linebreak nolist
set showbreak=»

" Unhighlight the search
nnoremap <silent> _ :nohl<CR>

" scss files read as css
au BufNewFile,BufRead *.scss setlocal filetype=sass

" Remove scrollbars
set guioptions+=LlRrb
set guioptions-=LlRrb

" Cursor
autocmd InsertEnter,InsertLeave * set cul!

" Remove menu
:set guioptions-=m  "remove menu bar
:set guioptions-=T  "remove toolbar
:set guioptions-=r  "remove right-hand scroll bar

 " Ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

" Basic options ----------------------------------------------------------- {{{

set encoding=utf-8
set modelines=0
set autoindent                  " Automatically set the indent of a new line (local to buffer)
set showmode                    " Show current mode down the bottom
set hidden
set visualbell                  " No sounds
set ttyfast                     " Improves redrawing
set ruler                       " Always show current positions along the bottom
set backspace=indent,eol,start  " Allow backspace in insert mode
set number                      " Line numbers are good
set laststatus=2                " Always show the status line
set history=1000                " Store lots of :cmdline history
set list                        " Hide invisible chars
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set shell=/bin/bash\ --login
set matchtime=3                 " how many tenths of a second to blink
set showbreak=↪
set splitbelow
set splitright
set autowrite
set autoread                    " Reload files changed outside vim
set shiftround                  " When at 3 spaces, and I hit > ... go to 4, not 5
set title
set linebreak
set pastetoggle=<F2>            " Use it for pasting large amounts of text into Vim, disabling all kinds of smartness and just pasting a whole buffer of text

if v:version > 702
  set norelativenumber            " It is much faster
  set undoreload=10000
endif

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"

" Save when losing focus
" au FocusLost * :silent! wall

" }}}

" Something occasionally removes this.  If I manage to find it I'm going to
" comment out the line and replace all its characters with 'FUCK'.
augroup twospace
    au!
    au BufRead * :set cpoptions+=J
augroup END

augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
augroup END

" }}}

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}

" Tabs, spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set wrap
set textwidth=80
set formatoptions=qrn1

" Leader
let mapleader = ","
let maplocalleader = "\\"

" Convenience mappings ---------------------------------------------------- {{{

" Fuck you, help key.
noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a

" Insert New Line
nnoremap <S-Enter> O<ESC> " awesome, inserts new line without going into insert mode
nnoremap <Enter> o<ESC>

" Searching and movement -------------------------------------------------- {{{

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault

set scrolloff=3
set sidescroll=1
set sidescrolloff=10

set virtualedit+=block

" Directional Keys {{{

" Easy buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

noremap <leader>v <C-w>v
noremap <leader>h <C-w>s

" }}}

" Haml {{{

au!
au BufRead,BufNewFile *.hamlc set ft=haml

" }}}
"
" CSS and Sass{{{

augroup ft_css
    au!

    au BufNewFile,BufRead *.less setlocal filetype=less

    au Filetype sass,scss,less,css setlocal foldmethod=marker
    au Filetype sass,scss,less,css setlocal foldmarker={,}
    au Filetype sass,scss,less,css setlocal iskeyword+=-

augroup END

" }}}

" HTML and XML {{{

let g:html_indent_tags = ['p', 'li']

augroup ft_html
    au!

    setlocal foldlevel=99
    au BufNewFile,BufRead *.html setlocal filetype=html
    au FileType html setlocal foldmethod=manual


    " Underscore tags
    au FileType html inoremap <buffer> <c-t> <%=<space><space>%><left><left><left>
    au FileType html inoremap <buffer> <c-f> <%<space><space>%><left><left><left>
augroup END

" }}}

" Javascript {{{

augroup ft_javascript
    au!

    au BufNewFile,BufRead jshintrc setlocal filetype=javascript
    au FileType javascript setlocal foldmethod=marker
    au FileType javascript setlocal foldmarker={,}
    au BufNewFile,BufRead *.js normal! zR

augroup END

" Markdown {{{

augroup ft_markdown
    au!

    au BufNewFile,BufRead *.m*down setlocal filetype=markdown
    au BufNewFile,BufRead *.md normal! zR
    au FileType markdown setlocal spell

    " Use <localleader>1/2/3 to add headings.
    au Filetype markdown nnoremap <buffer> <localleader>1 yypVr=:redraw<cr>
    au Filetype markdown nnoremap <buffer> <localleader>2 yypVr-:redraw<cr>
    au Filetype markdown nnoremap <buffer> <localleader>3 mzI###<space>`zllll <ESC>
augroup END

" }}}

" Environments (GUI/Console) ---------------------------------------------- {{{

if has('gui_running')

    if has("gui_macvim")

        " Use the normal HIG movements, except for M-Up/Down
        let macvim_skip_cmd_opt_movement = 1
        no   <D-Left>       <Home>
        no!  <D-Left>       <Home>
        no   <M-Left>       <C-Left>
        no!  <M-Left>       <C-Left>

        no   <D-Right>      <End>
        no!  <D-Right>      <End>
        no   <M-Right>      <C-Right>
        no!  <M-Right>      <C-Right>

        no   <D-Up>         <C-Home>
        ino  <D-Up>         <C-Home>
        imap <M-Up>         <C-o>{

        no   <D-Down>       <C-End>
        ino  <D-Down>       <C-End>
        imap <M-Down>       <C-o>}

        imap <M-BS>         <C-w>
        inoremap <D-BS>     <esc>my0c`y
    end
else

    " Console Vim
    " For me, this means iTerm2, possibly through tmux

    " Mouse support
    set mouse=a
endif


" }}}

"One way to make sure to remove all trailing whitespace in a file is to set an
"autocmd in your .vimrc file. Everytime the user issue a :w command, Vim will
"automatically remove all trailing whitespace before saving.
autocmd BufWritePre * :%s/\s\+$//e
